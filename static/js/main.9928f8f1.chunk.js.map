{"version":3,"sources":["firebase.js","components/Volunteer/VolunteerDashboard.js","components/Login.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","firestore","getFirestore","getStorage","VolunteerDashboard","scanResult","setScanResult","useState","React","createElement","QrReader","onResult","handleResult","result","error","data","text","collection","doc","get","then","exists","guestData","console","log","constraints","facingMode","style","width","Login","email","setEmail","password","setPassword","navigate","useNavigate","type","value","onChange","e","target","placeholder","onClick","async","user","signInWithEmailAndPassword","role","uid","App","Router","Routes","Route","path","element","GateAdminDashboard","MainAdminDashboard","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"2UAOA,MAWMA,EAAMC,YAXW,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAOXC,EAAOC,YAAQV,GACfW,EAAYC,YAAaZ,GACfa,YAAWb,G,YCiBZc,MApCf,WACE,MAAOC,EAAYC,GAAiBC,mBAAS,IAsB7C,OACEC,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,uBACJD,IAAAC,cAACC,IAAQ,CACPC,SAxBeC,CAACC,EAAQC,KAC5B,GAAMD,EAAQ,CACZ,MAAME,EAAa,OAANF,QAAM,IAANA,OAAM,EAANA,EAAQG,KACrBV,EAAcS,GAEdd,EAAUgB,WAAW,UAAUC,IAAIH,GAAMI,MACtCC,KAAKF,IACJ,GAAIA,EAAIG,OAAQ,CACd,MAAMC,EAAYJ,EAAIH,OACtBQ,QAAQC,IAAI,cAAeF,QAE3BC,QAAQC,IAAI,qBAIdV,GACJS,QAAQT,MAAMA,IASZW,YAAa,CAAEC,WAAY,eAC3BC,MAAO,CAAEC,MAAO,UAElBpB,IAAAC,cAAA,SAAIJ,K,kCCWKwB,MA1Cf,WACE,MAAOC,EAAOC,GAAYxB,mBAAS,KAC5ByB,EAAUC,GAAe1B,mBAAS,IACnC2B,EAAWC,cAmBjB,OACE3B,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,SACJD,IAAAC,cAAA,SACE2B,KAAK,QACLC,MAAOP,EACPQ,SAAWC,GAAMR,EAASQ,EAAEC,OAAOH,OACnCI,YAAY,UAEdjC,IAAAC,cAAA,SACE2B,KAAK,WACLC,MAAOL,EACPM,SAAWC,GAAMN,EAAYM,EAAEC,OAAOH,OACtCI,YAAY,aAEdjC,IAAAC,cAAA,UAAQiC,QAhCQC,UAClB,IACE,MACMC,SADuB7C,EAAK8C,2BAA2Bf,EAAOE,IACxCY,KAItBE,SADgB7C,EAAUgB,WAAW,SAASC,IAAI0B,EAAKG,KAAK5B,OAC7CJ,OAAO+B,KAEf,cAATA,EAAsBZ,EAAS,cACjB,eAATY,EAAuBZ,EAAS,eACvB,eAATY,GAAuBZ,EAAS,eACzC,MAAOpB,GACPS,QAAQT,MAAM,eAAgBA,MAmBA,WCrBrBkC,MAbf,WACE,OACExC,IAAAC,cAACwC,IAAM,KACLzC,IAAAC,cAACyC,IAAM,KACL1C,IAAAC,cAAC0C,IAAK,CAACC,KAAK,IAAIC,QAAS7C,IAAAC,cAACoB,EAAK,QAC/BrB,IAAAC,cAAC0C,IAAK,CAACC,KAAK,aAAaC,QAAS7C,IAAAC,cAACL,EAAkB,QACrDI,IAAAC,cAAC0C,IAAK,CAACC,KAAK,cAAcC,QAAS7C,IAAAC,cAAC6C,IAAkB,QACtD9C,IAAAC,cAAC0C,IAAK,CAACC,KAAK,cAAcC,QAAS7C,IAAAC,cAAC8C,IAAkB,WCF/CC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,KAAKuC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH7D,IAAAC,cAACD,IAAM8D,WAAU,KACf9D,IAAAC,cAACuC,EAAG,QAORQ,M","file":"static/js/main.9928f8f1.chunk.js","sourcesContent":["// Import only what you need from Firebase v9+\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\n// Your Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC2aXHppr-IO8UmITBOwlVvezQp6CbBfuk\",\r\n  authDomain: \"divine-energy-hub.firebaseapp.com\",\r\n  projectId: \"divine-energy-hub\",\r\n  storageBucket: \"divine-energy-hub.appspot.com\",\r\n  messagingSenderId: \"147821831701\",\r\n  appId: \"1:147821831701:web:55728fe02acdc5d9f5101c\",\r\n  measurementId: \"G-N71553V4QG\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Export services\r\nconst auth = getAuth(app);\r\nconst firestore = getFirestore(app);\r\nconst storage = getStorage(app);\r\n\r\nexport { auth, firestore, storage };\r\n","import React, { useState } from 'react';\r\nimport { firestore } from '../../firebase';\r\nimport { QrReader } from 'react-qr-reader';  // âœ… named import\r\n\r\nfunction VolunteerDashboard() {\r\n  const [scanResult, setScanResult] = useState('');\r\n\r\n  const handleResult = (result, error) => {\r\n    if (!!result) {\r\n      const data = result?.text;\r\n      setScanResult(data);\r\n\r\n      firestore.collection('guests').doc(data).get()\r\n        .then(doc => {\r\n          if (doc.exists) {\r\n            const guestData = doc.data();\r\n            console.log(\"Guest data:\", guestData);\r\n          } else {\r\n            console.log(\"Guest not found\");\r\n          }\r\n        });\r\n    }\r\n    if (!!error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Volunteer Dashboard</h2>\r\n      <QrReader\r\n        onResult={handleResult}\r\n        constraints={{ facingMode: 'environment' }}\r\n        style={{ width: '100%' }}\r\n      />\r\n      <p>{scanResult}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VolunteerDashboard;\r\n","import React, { useState } from 'react';\r\nimport { auth, firestore } from '../firebase'; // Import your Firebase config\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Login() {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const userCredential = await auth.signInWithEmailAndPassword(email, password);\r\n      const user = userCredential.user;\r\n\r\n      // Get user role from Firestore\r\n      const userDoc = await firestore.collection('users').doc(user.uid).get();\r\n      const role = userDoc.data().role;\r\n\r\n      if (role === 'volunteer') navigate('/volunteer');\r\n      else if (role === 'gate-admin') navigate('/gate-admin');\r\n      else if (role === 'main-admin') navigate('/main-admin');\r\n    } catch (error) {\r\n      console.error('Login failed', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Login</h2>\r\n      <input\r\n        type=\"email\"\r\n        value={email}\r\n        onChange={(e) => setEmail(e.target.value)}\r\n        placeholder=\"Email\"\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        placeholder=\"Password\"\r\n      />\r\n      <button onClick={handleLogin}>Login</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport VolunteerDashboard from './components/Volunteer/VolunteerDashboard';\nimport GateAdminDashboard from './components/GateAdminDashboard';\nimport MainAdminDashboard from './components/MainAdminDashboard';\nimport Login from './components/Login';\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Login />} />\n        <Route path=\"/volunteer\" element={<VolunteerDashboard />} />\n        <Route path=\"/gate-admin\" element={<GateAdminDashboard />} />\n        <Route path=\"/main-admin\" element={<MainAdminDashboard />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}